import * as React from "react";
import Layout from "../components/layout";
import axios from "axios";
import {
  Box,
  Divider,
  Typography,
  Link,
  useTheme,
  Grid,
  CircularProgress,
} from "@material-ui/core";
import BookmarksIcon from "@material-ui/icons/Bookmarks";
import { gql, useMutation, useQuery } from "@apollo/client";
import { Formik, Form, FormikHelpers } from "formik";
import * as Yup from "yup";
import FormikMuiTextField from "../components/FormikMuiTextField";
import { Button } from "gatsby-theme-material-ui";

const GET_ALL_BOOKMARKS = gql`
  query {
    allBookmarks {
      id
      url
      title
      description
    }
  }
`;

const CREATE_BOOKMARK = gql`
  mutation createBookmark($url: String!) {
    createBookmark(url: $url) {
      id
      url
      title
      description
    }
  }
`;

const Admin = (props) => {
  const theme = useTheme();
  const { loading, error, data, refetch } = useQuery(GET_ALL_BOOKMARKS);
  const [createBookmark, { loading: createBookmarkLoading }] = useMutation(
    CREATE_BOOKMARK,
    {
      refetchQueries: [{ query: GET_ALL_BOOKMARKS }],
      awaitRefetchQueries: true,
    }
  );

  const handleCreateBookmark = async (
    values: {
      url: string;
      title: string;
      description: string;
    },
    formikHelpers: FormikHelpers<{
      url: string;
      title: string;
      description: string;
    }>
  ) => {
    try {
      await createBookmark({ variables: { url: values.url } });
      formikHelpers.resetForm();
    } catch (error) {
      console.log("Create Bookmark", error);
    } finally {
      formikHelpers.setSubmitting(false);
    }
  };

  const handleRebuildWebsite = async () => {
    try {
      if (
        confirm(
          "This action is a one way action. It will trigger the Netlify build to regenerate the website's STATIC home page. It will take few minutes for the build to complete, so be patient. Are you sure you would like to go ahead?"
        )
      ) {
        const response = await axios.post("/.netlify/functions/rebuildWebsite");
        console.log(response);
      }
    } catch (error) {
      console.log("Rebuild Website Error:", error);
    }
  };

  return (
    <Layout pathname={props.location.pathname}>
      <Box display="flex" alignItems="center" flexWrap="wrap">
        <Box display="flex" flexDirection="column" flexGrow={1}>
          <Box display="flex" alignItems="center">
            <BookmarksIcon /> {"  "}
            <Typography variant="h5" style={{ marginLeft: theme.spacing(1) }}>
              Manage Bookmarks
            </Typography>
          </Box>
          <Typography>
            This is dynamic data generated by Gatsby at Run Time
          </Typography>
        </Box>
        <Button
          variant="contained"
          color="secondary"
          size="large"
          onClick={handleRebuildWebsite}
        >
          Rebuild Website
        </Button>
      </Box>
      <Divider />
      <Box my={2}>
        <Formik
          initialValues={{ url: "", title: "", description: "" }}
          validationSchema={Yup.object({
            url: Yup.string().url().trim().required().min(1),
          })}
          validateOnChange={false}
          validateOnBlur={false}
          onSubmit={handleCreateBookmark}
        >
          {(props) => (
            <Form>
              <Grid container spacing={2} justify="center" alignItems="stretch">
                <Grid item xs={12} sm={10}>
                  <FormikMuiTextField
                    name="url"
                    label="Url"
                    variant="outlined"
                    fullWidth
                    autoFocus
                  />
                </Grid>
                <Grid item xs={12} sm={2}>
                  <Button
                    fullWidth
                    variant="contained"
                    color="primary"
                    type="submit"
                    startIcon={
                      props.isSubmitting && (
                        <CircularProgress color="secondary" size="1rem" />
                      )
                    }
                    disabled={props.isSubmitting || createBookmarkLoading}
                    style={{ height: "100%" }}
                  >
                    Save
                  </Button>
                </Grid>
              </Grid>

              {/* <hr />
              <pre>{JSON.stringify(props.errors, null, 4)}</pre>
              <pre>{JSON.stringify(props.values, null, 4)}</pre> */}
            </Form>
          )}
        </Formik>
      </Box>

      <Divider />
      {error && <pre>{JSON.stringify(error, null, 4)}</pre>}
      {loading && <div>Loading...</div>}
      {data && data.allBookmarks.length > 0 && (
        <>
          {data.allBookmarks.map((bm) => {
            return (
              <Box key={bm.id} mt={2}>
                <Link
                  variant="h6"
                  color="secondary"
                  href={bm.url}
                  target="blank"
                  rel="noopener"
                >
                  {bm.title ? bm.title : bm.url}
                </Link>

                <Typography variant="subtitle2">{bm.description}</Typography>
              </Box>
            );
          })}
        </>
      )}
    </Layout>
  );
};

export default Admin;
